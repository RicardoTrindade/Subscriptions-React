import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** The mutation root of the ApiSchema. */
export type MutationRoot = {
  __typename?: 'MutationRoot';
  /** Creates 10 users in a background job */
  createBatchUser: Scalars['Boolean'];
};

/** The query root of the ApiSchema. */
export type QueryRoot = {
  __typename?: 'QueryRoot';
  /** Information about the Customer */
  getUser?: Maybe<User>;
};


/** The query root of the ApiSchema. */
export type QueryRootGetUserArgs = {
  id: Scalars['Int'];
};

/** The query root of the ApiSchema. */
export type SubscriptionRoot = {
  __typename?: 'SubscriptionRoot';
  userCreated: UserCreatedPayload;
};

/** Customer related information */
export type User = {
  __typename?: 'User';
  /** email */
  email: Scalars['String'];
  /** id */
  id: Scalars['Int'];
};

/** Autogenerated return type of UserCreated */
export type UserCreatedPayload = {
  __typename?: 'UserCreatedPayload';
  user?: Maybe<User>;
};

export type BatchUserCreationMutationVariables = Exact<{ [key: string]: never; }>;


export type BatchUserCreationMutation = (
  { __typename?: 'MutationRoot' }
  & Pick<MutationRoot, 'createBatchUser'>
);

export type GetUserQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type GetUserQuery = (
  { __typename?: 'QueryRoot' }
  & { getUser?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id'>
  )> }
);

export type UserCreatedSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type UserCreatedSubscription = (
  { __typename?: 'SubscriptionRoot' }
  & { userCreated: (
    { __typename?: 'UserCreatedPayload' }
    & { user?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'id' | 'email'>
    )> }
  ) }
);


export const BatchUserCreationDocument = gql`
    mutation BatchUserCreation {
  createBatchUser
}
    `;
export type BatchUserCreationMutationFn = Apollo.MutationFunction<BatchUserCreationMutation, BatchUserCreationMutationVariables>;
export function useBatchUserCreationMutation(baseOptions?: Apollo.MutationHookOptions<BatchUserCreationMutation, BatchUserCreationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<BatchUserCreationMutation, BatchUserCreationMutationVariables>(BatchUserCreationDocument, options);
      }
export type BatchUserCreationMutationHookResult = ReturnType<typeof useBatchUserCreationMutation>;
export type BatchUserCreationMutationResult = Apollo.MutationResult<BatchUserCreationMutation>;
export type BatchUserCreationMutationOptions = Apollo.BaseMutationOptions<BatchUserCreationMutation, BatchUserCreationMutationVariables>;
export const GetUserDocument = gql`
    query GetUser($id: Int!) {
  getUser(id: $id) {
    id
  }
}
    `;
export function useGetUserQuery(baseOptions: Apollo.QueryHookOptions<GetUserQuery, GetUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, options);
      }
export function useGetUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, options);
        }
export type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;
export type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;
export type GetUserQueryResult = Apollo.QueryResult<GetUserQuery, GetUserQueryVariables>;
export const UserCreatedDocument = gql`
    subscription userCreated {
  userCreated {
    user {
      id
      email
    }
  }
}
    `;
export function useUserCreatedSubscription(baseOptions?: Apollo.SubscriptionHookOptions<UserCreatedSubscription, UserCreatedSubscriptionVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useSubscription<UserCreatedSubscription, UserCreatedSubscriptionVariables>(UserCreatedDocument, options);
      }
export type UserCreatedSubscriptionHookResult = ReturnType<typeof useUserCreatedSubscription>;
export type UserCreatedSubscriptionResult = Apollo.SubscriptionResult<UserCreatedSubscription>;